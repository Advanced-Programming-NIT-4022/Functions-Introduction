import java.util.ArrayList;
import java.util.Scanner;
import java.util.Random;

// Actually putting an interface in this project was great put it doesn't deserved my time :)
public class Main {
	public static void main(String[] ags)
	{
		System.out.println("--~~Welcome to this Cli based Resume Maker~~--");
		System.out.println("## Type out (q) at any stage to quit.");

		Scanner s = new Scanner(System.in);

		// This is just for fun! No Security System generates a key like that ;(
		Random rand = new Random();
		int caesar_key = rand.nextInt(26);

		// we need this outter do-while just because it's scope
		// (I could use exit() directlly but I think it's more structured to do it this way)
		// all the initial values will be encrypted
		outter:  do
		{
			// Getting First Name
			String firstname = "";
			while (firstname.replaceAll("^\\s+|\\s+$", "").isEmpty())
			{
				System.out.print("Tell me your first name: ");
				firstname = s.nextLine();
				if (firstname.equals("q")) break outter;
			}
			// ******************

			// Getting Last Name
			String lastname = "";
			while (lastname.replaceAll("^\\s+|\\s+$", "").isEmpty())
			{
				System.out.print("Tell me your last name: ");
				lastname = s.nextLine();
				if (lastname.equals("q")) break outter;
			}
			// ******************

			// Generating FullName
			String fullname = caesarCipher(fullName(firstname, lastname), caesar_key, 'e');
			// *******************
			
			// Getting userID
			String user_id;
			while (true)
			{
				System.out.print("Enter you userID: ");
				user_id = s.nextLine();
				if (user_id.equals("q")) break outter;
				user_id = userId(user_id);
				if (user_id == null) continue;
				break;
			}
			// **************

			// Getting intrests
			var interests = getInterests();
			for (int i = 0; i < interests.size(); i++)
			{
				interests.set(i, caesarCipher(interests.get(i), caesar_key, 'e'));
			}
			// ****************

			// Getting Phone Number
			String phone_number;
			while (true)
			{
				System.out.print("Enter you Phone Number: ");
				phone_number = s.nextLine();
				if (phone_number.equals("q")) break outter;
				phone_number = phoneNumber(phone_number);
				if (phone_number == null) continue;
				break;
			}
			// ********************

			// Printing out the result!
			String choice;
			System.out.println("Your resume is Complete!");
			while (true)
			{
				System.out.print("whould you want to see the encrypted version(y/n)>> ");
				choice = s.nextLine();
				if (choice.equals("q")) break outter;
				if (choice.toLowerCase().equals("y") || choice.toLowerCase().equals("yes"))
				{
					choice = "y";
					break;
				}
				if (choice.toLowerCase().equals("n") || choice.toLowerCase().equals("no"))
				{
					choice = "n";
					break;
				}
			}

			if (choice.equals("y"))
			{
				userFullInformation(fullname, "***********", "**************", interests);
			}
			else
			{
				// decoding all the information first
				fullname = caesarCipher(fullname, caesar_key, 'd');
				for (int i = 0; i < interests.size(); i++)
				{
					interests.set(i, caesarCipher(interests.get(i), caesar_key, 'd'));
				}
				userFullInformation(fullname, phone_number, user_id, interests);
			}
			// ************************
		} while (false);

		System.out.println("##Program Quited##");
	}
	
   /* **********************************************************************
	* first and last name in ==> first(Capitalized) + last(Capitalized) out*
	* this function does the formatting inplace							   *
	***********************************************************************/
	static String fullName(String first_name, String last_name)
	{
		// removing all whitespaces (regex generated by chat-gpt :))
		first_name = first_name.replaceAll("^\\s+|\\s+$", "");
		last_name = last_name.replaceAll("^\\s+|\\s+$", "");

		// Capitalizing first letter of first name
        if (!first_name.isEmpty()) {
            first_name = first_name.substring(0, 1).toUpperCase() + first_name.substring(1).toLowerCase();
        }
		else return null;

        // Capitalizing first letter of last name
        if (!last_name.isEmpty()) {
            last_name = last_name.substring(0, 1).toUpperCase() + last_name.substring(1).toLowerCase();
        }
		else return null;

        return first_name + " " + last_name;
	}

	/* **********************************************************************
	 * phone-number in ==> the phone-number if it was valid else null		*
	 ***********************************************************************/
	 static String phoneNumber(String number)
	 {
		// removing all whitespaces (regex generated by chat-gpt :))
		number = number.replaceAll("^\\s+|\\s+$", "");
	 	
		if (!number.matches("\\d+"))
			return null;

		if (number.length() == 10)
		{
			if (number.charAt(0) == '9')
				return "0" + number;
		}
		
		if (number.length() == 11)
		{
			if (number.charAt(0) == '0' && number.charAt(1) == '9')
				return number;
		}

		return null;
	 }

	/* **********************************************************************
	 * user-id in ==> the id if it was valid else null						*
	 ***********************************************************************/
	 static String userId(String id)
	 {
		// removing all whitespaces (regex generated by chat-gpt :))
		id = id.replaceAll("^\\s+|\\s+$", "");

		if (!id.matches("\\d+") || id.length() < 4 || id.length() > 13)
			return null;

		return id;
	 }

	/* **********************************************************************
	 * getting interests of user one by one ==> a list of user intersts		*
	 ***********************************************************************/
	 static ArrayList<String> getInterests()
	 {
	 	System.out.println("--~~Enter your interests. type '!' if it's done. (max: 10)~~-");

		Scanner s = new Scanner(System.in);
		ArrayList<String> result = new ArrayList<>();
		String input = null;
		int count = 1;
		while (count < 11)
		{
			System.out.print(count + ". ");
			input = s.nextLine().replaceAll("^\\s+|\\s+$", "");

			if (input.isEmpty())
			{
				System.out.println("Please enter something!");
				continue;
			}
			
			if (result.contains(input))
			{
				System.out.println("You entered this once before!");
				continue;
			}

			if (input.equals("!"))
			{
				return result; 
			}

			if (input.equals("q"))
			{
				System.out.println("##Program Quited##");
				System.exit(0);
			}

			result.add(input);
			count++;
		}
		s.close();
		return result;
	 }

	/* **********************************************************************
	 * geting informations of user ==> printing out the formatted version	*
	 ***********************************************************************/
	 static void userFullInformation(String fullname, String phonenumber, String userid, ArrayList<String> interests)
	 {
	 	System.out.println("~~Your resume:");
		System.out.printf("##Hello! My name is %s. My ID is %s.", fullname, userid);
		if (interests.isEmpty())
		{
			System.out.print("\n##Actally I have no interests, cause I think everything is boring :)\n");
		}
		else
		{
			System.out.print(" Here are some of my interests:\n");
			for (int i = 0; i < interests.size(); i++)
			{
				System.out.println("## " + (i + 1) + ". " + interests.get(i));
			}
		}
		System.out.println("##You can reach me Via my phone number " + phonenumber + ".");
	 }

	
   /* ************************************************************************
	* caesar cipher impelimentation ==> modes: e(for encode) | d (for decode)*
	**************************************************************************/
	static String caesarCipher(String plain, int key, char mode)
	{
		if (mode != 'e' && mode != 'd') return null;

		key %= 26;
		StringBuilder cipher = new StringBuilder();

		char tmp;
        for (int i = 0; i < plain.length(); i++) {
            tmp = plain.charAt(i);
            if (Character.isLetter(tmp)) {
                if (mode == 'e') {
                    tmp = (char) (tmp + key);
                    if ((Character.isLowerCase(plain.charAt(i)) && tmp > 'z') || (Character.isUpperCase(plain.charAt(i)) && tmp > 'Z')) {
                        tmp = (char) (tmp - 26);
                    }
                } else if (mode == 'd') {
                    tmp = (char) (tmp - key);
                    if ((Character.isLowerCase(plain.charAt(i)) && tmp < 'a') || (Character.isUpperCase(plain.charAt(i)) && tmp < 'A')) {
                        tmp = (char) (tmp + 26);
                    }
                }
            }
            cipher.append(tmp);
        }
        return cipher.toString();
	}
}
